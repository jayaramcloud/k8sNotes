



# https://kubernetes.io/docs/tutorials/k8s201/
# https://cheatsheet.dennyzhang.com/kubernetes-yaml-templates
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
spec:
  selector:
    matchLabels:
      app: nginx
  replicas: 2
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
        - name: nginx
          image: nginx:1.8
          resources:
            limits:
              memory: "128Mi"
              cpu: "250m"
          ports:
            - containerPort: 80




# https://cheatsheet.dennyzhang.com/kubernetes-yaml-templates
kind: PersistentVolume
apiVersion: v1
metadata:
  name: mysql-pv-volume
  labels:
    type: local
spec:
  storageClassName: manual
  capacity:
    storage: 20Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/data"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
---
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
    - port: 3306
  selector:
    app: mysql
  clusterIP: None
---
apiVersion: apps/v1 # for versions before 1.9.0 use apps/v1beta2
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
        - image: mysql:5.6
          name: mysql
          env:
            # Use secret in real usage
            - name: MYSQL_ROOT_PASSWORD
              value: password
          ports:
            - containerPort: 3306
              name: mysql
          volumeMounts:
            - name: mysql-persistent-storage
              mountPath: /var/lib/mysql
      volumes:
        - name: mysql-persistent-storage
          persistentVolumeClaim:
            claimName: mysql-pv-claim




# https://github.com/kubernetes/examples/blob/master/staging/elasticsearch/es-rc.yaml
# https://cheatsheet.dennyzhang.com/kubernetes-yaml-templates
apiVersion: v1
kind: Pod
metadata:
  name: dummy
  namespace: default
  labels:
    env: test
spec:
  initContainers:
    - name: init-sysctl
      image: busybox
      imagePullPolicy: IfNotPresent
      command: ["sysctl", "-w", "vm.max_map_count=262144"]
      securityContext:
        privileged: true
  containers:
    - name: es
      securityContext:
        capabilities:
          add:
            - IPC_LOCK
      image: quay.io/pires/docker-elasticsearch-kubernetes:5.6.2
      env:
        - name: KUBERNETES_CA_CERTIFICATE_FILE
          value: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: "CLUSTER_NAME"
          value: "myesdb"
        - name: "DISCOVERY_SERVICE"
          value: "elasticsearch"
        - name: NODE_MASTER
          value: "true"
        - name: NODE_DATA
          value: "true"
        - name: HTTP_ENABLE
          value: "true"
      ports:
        - containerPort: 9200
          name: http
          protocol: TCP
        - containerPort: 9300
          name: transport
          protocol: TCP
      volumeMounts:
        - mountPath: /data
          name: storage
  volumes:
    - name: storage
      emptyDir: {}




# https://kubernetes.io/docs/tasks/inject-data-application/distribute-credentials-secure/
# kubectl apply -f pod-secrets.yaml
# kubectl get pods
## check status, when pod is running
# kubectl exec secret-test-pod cat /etc/secret-volume/username
# kubectl exec secret-test-pod cat /etc/secret-volume/password
# kubectl exec secret-test-pod printenv SECRET_USERNAME
# kubectl exec secret-test-pod printenv SECRET_PASSWORD
## cleanup
# kubectl delete -f pod-secrets.yaml
# https://cheatsheet.dennyzhang.com/kubernetes-yaml-templates
apiVersion: v1
kind: Secret
metadata:
  name: test-secret
data:
  username: bXktYXBw
  password: Mzk1MjgkdmRnN0pi
---
apiVersion: v1
kind: Pod
metadata:
  name: secret-test-pod
spec:
  containers:
    - name: test-container
      image: nginx
      volumeMounts:
        # name must match the volume name below
        - name: secret-volume
          mountPath: /etc/secret-volume
      env:
        - name: SECRET_USERNAME
          valueFrom:
            secretKeyRef:
              name: test-secret
              key: username
        - name: SECRET_PASSWORD
          valueFrom:
            secretKeyRef:
              name: test-secret
              key: password
  # The secret data is exposed to Containers in the Pod through a Volume.
  volumes:
    - name: secret-volume
      secret:
        secretName: test-secret




# https://kubernetes.io/docs/tutorials/k8s101/
# https://cheatsheet.dennyzhang.com/kubernetes-yaml-templates
apiVersion: v1
kind: Pod
metadata:
  name: nginx
spec:
  containers:
    - name: nginx
      image: nginx:1.7.9
      ports:
        - containerPort: 80




# https://github.com/dennyzhang/cheatsheet-kubernetes-A4
# https://cheatsheet.dennyzhang.com/kubernetes-yaml-templates
apiVersion: v1
kind: Pod
metadata:
  name: dummy
  namespace: default
  labels:
    env: test
spec:
  serviceAccountName: my-serviceaccount
  containers:
    - name: dummy
      image: ubuntu
      # image: busybox
      args: [/bin/sh, -c,
             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']




# https://github.com/dennyzhang/cheatsheet-kubernetes-A4
# https://cheatsheet.dennyzhang.com/kubernetes-yaml-templates
apiVersion: v1
kind: Pod
metadata:
  name: dummy
  namespace: default
  labels:
    env: test
spec:
  containers:
    - name: dummy
      image: ubuntu
      # image: busybox
      args: [/bin/sh, -c,
             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']




# https://kubernetes.io/docs/tasks/configure-pod-container/attach-handler-lifecycle-event/
# https://cheatsheet.dennyzhang.com/kubernetes-yaml-templates
apiVersion: v1
kind: Pod
metadata:
  name: lifecycle-demo
spec:
  containers:
    - name: lifecycle-demo-container
      image: nginx
      lifecycle:
        postStart:
          exec:
            command: ["/bin/sh", "-c", "echo Hello from the postStart handler > /usr/share/message"]
        preStop:
          exec:
            command: ["/usr/sbin/nginx","-s","quit"]




# https://kubernetes.io/docs/tutorials/k8s201/
# https://cheatsheet.dennyzhang.com/kubernetes-yaml-templates
apiVersion: v1
kind: Pod
metadata:
  name: pod-with-http-healthcheck
spec:
  containers:
    - name: nginx
      image: nginx
      # defines the health checking
      livenessProbe:
        # an http probe
        httpGet:
          path: /_status/healthz
          port: 80
        # length of time to wait for a pod to initialize
        # after pod startup, before applying health checking
        initialDelaySeconds: 30
        timeoutSeconds: 1
      ports:
        - containerPort: 80

---
apiVersion: v1
kind: Pod
metadata:
  name: pod-with-tcp-socket-healthcheck
spec:
  containers:
    - name: redis
      image: redis
      # defines the health checking
      livenessProbe:
        # a TCP socket probe
        tcpSocket:
          port: 6379
        # length of time to wait for a pod to initialize
        # after pod startup, before applying health checking
        initialDelaySeconds: 30
        timeoutSeconds: 1
      ports:
        - containerPort: 6379




# https://kubernetes.io/docs/tutorials/k8s101/
# https://gist.github.com/tallclair/849601a16cebeee581ef2be50c351841
# https://cheatsheet.dennyzhang.com/kubernetes-yaml-templates
apiVersion: v1
kind: Pod
metadata:
  name: www
spec:
  initContainers:
    - name: git-clone
      image: alpine/git
      args:
        - clone
        - --single-branch
        - --
        - https://github.com/dennyzhang/challenges-kubernetes.git
        - /data/challenges-kubernetes
      securityContext:
        runAsUser: 1 # Any non-root user will do. Match to the workload.
        allowPrivilegeEscalation: false
        readOnlyRootFilesystem: true
      volumeMounts:
        - mountPath: /data
          name: www-data
  containers:
    - name: nginx
      image: nginx
      volumeMounts:
        - mountPath: /srv/www
          name: www-data
          readOnly: true
  volumes:
    - name: www-data
      emptyDir: {}




# https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
# https://cheatsheet.dennyzhang.com/kubernetes-yaml-templates
apiVersion: v1
kind: Pod
metadata:
  name: hostaliases-pod
spec:
  restartPolicy: Never
  hostAliases:
    - ip: "127.0.0.1"
      hostnames:
        - "foo.local"
        - "bar.local"
    - ip: "10.1.2.3"
      hostnames:
        - "foo.remote"
        - "bar.remote"
  containers:
    - name: dummy-hosts
      image: busybox
      args: [/bin/sh, -c,
             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']




# https://kubernetes.io/docs/concepts/services-networking/ingress/
# https://medium.com/google-cloud/kubernetes-nodeport-vs-loadbalancer-vs-ingress-when-should-i-use-what-922f010849e0
apiVersion: v1
kind: Service
metadata:
  name: my-nodeport-wordpress
  namespace: wordpress
spec:
  selector:
    app.kubernetes.io/component: wordpress-webserver
  type: NodePort
  ports:
    - name: http
      port: 80
      targetPort: 80
      nodePort: 30036
      protocol: TCP




apiVersion: v1
kind: Service
metadata:
  name: jenkins-monitoring
  namespace: ns-ci
spec:
  type: LoadBalancer
  selector:
    app: jenkins
  ports:
    - name: http
      port: 8080
      targetPort: 8080
      protocol: TCP




# https://kubernetes.io/docs/tutorials/k8s201/
# Default service type: ClusterIP
# https://cheatsheet.dennyzhang.com/kubernetes-yaml-templates
apiVersion: v1
kind: Service
metadata:
  name: nginx-service
spec:
  ports:
    - port: 8000 # the port that this service should serve on
      # the container on each pod to connect to, can be a name
      # (e.g. 'www') or a number (e.g. 80)
      targetPort: 80
      protocol: TCP
  # just like the selector in the deployment,
  # but this time it identifies the set of pods to load balance
  # traffic to.
  selector:
    app: nginx




# https://kubernetes.io/docs/tutorials/stateful-application/cassandra/
# https://cheatsheet.dennyzhang.com/kubernetes-yaml-templates
apiVersion: v1
kind: Service
metadata:
  labels:
    app: cassandra
  name: cassandra
spec:
  clusterIP: None
  ports:
    - port: 9042
  selector:
    app: cassandra




# https://kubernetes.io/docs/concepts/services-networking/ingress/
# https://cheatsheet.dennyzhang.com/kubernetes-yaml-templates
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: test-ingress
  namespace: wordpress
spec:
  backend:
    serviceName: wordpress-1-wordpress-svc
    servicePort: 80




# https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/
# https://kubernetes.io/docs/tasks/inject-data-application/define-environment-variable-container/
# https://cheatsheet.dennyzhang.com/kubernetes-yaml-templates
apiVersion: v1
kind: Pod
metadata:
  name: command-demo
  labels:
    purpose: demonstrate-command
spec:
  containers:
    - name: command-demo-container
      image: debian
      command: ["printenv"]
      args: ["HOSTNAME", "KUBERNETES_PORT", "DEMO_GREETING", "DEMO_FAREWELL"]
      env:
        - name: DEMO_GREETING
          value: "Hello from the environment"
        - name: DEMO_FAREWELL
          value: "Such a sweet sorrow"
  restartPolicy: OnFailure




# https://cheatsheet.dennyzhang.com/kubernetes-yaml-templates
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: dummy-controller
  namespace: myns
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: dummy-controller
    spec:
      containers:
        - name: dummy-controller
          image: my/dummy-controller
          imagePullPolicy: Always
          env:
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace




# Create configmap from local file
# https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/#create-configmaps-from-files
# kubectl create configmap game-config-2 --from-file=configure-pod-container/configmap/game.properties --from-file=configure-pod-container/configmap/ui.properties
# Populate a Volume with data stored in a ConfigMap
# https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/#populate-a-volume-with-data-stored-in-a-configmap
apiVersion: v1
kind: Pod
metadata:
  name: dapi-test-pod
spec:
  containers:
    - name: test-container
      image: k8s.gcr.io/busybox
      command: [ "/bin/sh", "-c", "ls /etc/config/" ]
      volumeMounts:
        - name: config-volume
          mountPath: /etc/config
  volumes:
    - name: config-volume
      configMap:
        # Provide the name of the ConfigMap containing the files you want
        # to add to the container
        name: special-config
  restartPolicy: Never




apiVersion: v1
kind: ConfigMap
metadata:
  name: test-staging-sidekiq
  labels:
    name: test-staging-sidekiq
  namespace: test
data:
  config: |-
    ---
    :verbose: true
    :environment: staging
    :pidfile: tmp/pids/sidekiq.pid
    :logfile: log/sidekiq.log
    :concurrency: 20
    :queues:
      - [default, 1]
    :dynamic: true
    :timeout: 300




# https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
# https://cheatsheet.dennyzhang.com/kubernetes-yaml-templates
apiVersion: batch/v1
kind: Job
metadata:
  name: pi
spec:
  template:
    spec:
      containers:
        - name: pi
          image: perl
          command: ["perl",  "-Mbignum=bpi", "-wle", "print bpi(2000)"]
      restartPolicy: Never
      nodeSelector:
        kubernetes.io/hostname: gke-cluster-1-default-pool-559d6680-43r5
  backoffLimit: 4




# https://kubernetes.io/docs/concepts/policy/pod-security-policy/
# https://cheatsheet.dennyzhang.com/kubernetes-yaml-templates
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: restricted-advanced
  annotations:
    seccomp.security.alpha.kubernetes.io/allowedProfileNames: 'docker/default'
    apparmor.security.beta.kubernetes.io/allowedProfileNames: 'runtime/default'
    seccomp.security.alpha.kubernetes.io/defaultProfileName:  'docker/default'
    apparmor.security.beta.kubernetes.io/defaultProfileName:  'runtime/default'
spec:
  privileged: false
  # Required to prevent escalations to root.
  allowPrivilegeEscalation: false
  # This is redundant with non-root + disallow privilege escalation,
  # but we can provide it for defense in depth.
  requiredDropCapabilities:
    - ALL
  # Allow core volume types.
  volumes:
    - 'configMap'
    - 'emptyDir'
    - 'projected'
    - 'secret'
    - 'downwardAPI'
    # Assume that persistentVolumes set up by the cluster admin are safe to use.
    - 'persistentVolumeClaim'
  hostNetwork: false
  hostIPC: false
  hostPID: false
  runAsUser:
    # Require the container to run without root privileges.
    rule: 'MustRunAsNonRoot'
  seLinux:
    # This policy assumes the nodes are using AppArmor rather than SELinux.
    rule: 'RunAsAny'
  supplementalGroups:
    rule: 'MustRunAs'
    ranges:
      # Forbid adding the root group.
      - min: 1
        max: 65535
  fsGroup:
    rule: 'MustRunAs'
    ranges:
      # Forbid adding the root group.
      - min: 1
        max: 65535
  readOnlyRootFilesystem: false




# https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
# kubectl exec -it security-context-demo -c demo1 touch /data/demo/test.log
# kubectl exec -it security-context-demo -c demo1 -- ls -l /data/demo/test.log
# ,-----------
# |   kubectl exec -it security-context-demo -- ls -l /data/demo/test.log
# | -rw-r--r-- 1 1000 2000 0 Sep 19 16:18 /data/demo/test.log
# `-----------
# kubectl exec -it security-context-demo -c demo2 touch /tmp/test.log
# kubectl exec -it security-context-demo -c demo2 -- ls -l /tmp/test.log
# ,-----------
# |    kubectl exec -it security-context-demo -c demo2 -- ls -l /tmp/test.log
# | -rw-r--r--    1 2000     root             0 Sep 19 16:38 /tmp/test.log
# `-----------
# https://cheatsheet.dennyzhang.com/kubernetes-yaml-templates
apiVersion: v1
kind: Pod
metadata:
  name: security-context-demo
spec:
  securityContext:
    runAsUser: 1000
    fsGroup: 2000
  volumes:
    - name: sec-ctx-vol
      emptyDir: {}
  containers:
    - name: demo1
      image: gcr.io/google-samples/node-hello:1.0
      volumeMounts:
        - name: sec-ctx-vol
          mountPath: /data/demo
      securityContext:
        allowPrivilegeEscalation: false
    - name: demo2
      image: busybox
      args: [/bin/sh, -c,
             'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
      securityContext:
        # configure security context at container level, instead of pod level
        runAsUser: 2000
        allowPrivilegeEscalation: false




# https://github.com/kubernetes/examples/blob/master/staging/podsecuritypolicy/rbac/policies.yaml
# https://kubernetes.io/docs/concepts/policy/pod-security-policy/
# https://cheatsheet.dennyzhang.com/kubernetes-yaml-templates
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: restricted
spec:
  privileged: false
  fsGroup:
    rule: RunAsAny
  runAsUser:
    rule: MustRunAsNonRoot
  seLinux:
    rule: RunAsAny
  supplementalGroups:
    rule: RunAsAny
  volumes:
    - 'emptyDir'
    - 'secret'
    - 'downwardAPI'
    - 'configMap'
    - 'persistentVolumeClaim'
    - 'projected'
  hostPID: false
  hostIPC: false
  hostNetwork: false




# https://github.com/kubernetes/examples/blob/master/staging/podsecuritypolicy/rbac/bindings.yaml
# restricted-psp-user grants access to use the restricted PSP.
# https://cheatsheet.dennyzhang.com/kubernetes-yaml-templates
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: restricted-psp-user
rules:
  - apiGroups:
      - policy
    resources:
      - podsecuritypolicies
    resourceNames:
      - restricted
    verbs:
      - use
---
# https://github.com/kubernetes/examples/blob/master/staging/podsecuritypolicy/rbac/policies.yaml
# https://kubernetes.io/docs/concepts/policy/pod-security-policy/
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: restricted
spec:
  privileged: false
  fsGroup:
    rule: RunAsAny
  runAsUser:
    rule: MustRunAsNonRoot
  seLinux:
    rule: RunAsAny
  supplementalGroups:
    rule: RunAsAny
  volumes:
    - 'emptyDir'
    - 'secret'
    - 'downwardAPI'
    - 'configMap'
    - 'persistentVolumeClaim'
    - 'projected'
  hostPID: false
  hostIPC: false
  hostNetwork: false
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: restricted-psp-users
subjects:
  - kind: Group
    apiGroup: rbac.authorization.k8s.io
    name: restricted-psp-users
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: restricted-psp-user
---
# edit grants edit role to the groups
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: edit
subjects:
  - kind: Group
    apiGroup: rbac.authorization.k8s.io
    name: restricted-psp-users
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: edit




---
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: kube-system-psp
  annotations:
    seccomp.security.alpha.kubernetes.io/allowedProfileNames: 'docker/default'
    apparmor.security.beta.kubernetes.io/allowedProfileNames: 'runtime/default'
    seccomp.security.alpha.kubernetes.io/defaultProfileName:  'docker/default'
    apparmor.security.beta.kubernetes.io/defaultProfileName:  'runtime/default'
spec:
  privileged: false
  # Required to prevent escalations to root.
  allowPrivilegeEscalation: false
  allowedCapabilities:
    - '*'
  # Allow core volume types.
  hostNetwork: true
  hostPorts:
    - min: 0
      max: 65535
  hostIPC: true
  hostPID: true
  volumes:
    - 'configMap'
    - 'emptyDir'
    - 'projected'
    - 'secret'
    - 'downwardAPI'
  runAsUser:
    # Require the container to run without root privileges.
    rule: 'RunAsAny'
  seLinux:
    # This policy assumes the nodes are using AppArmor rather than SELinux.
    rule: 'RunAsAny'
  supplementalGroups:
    rule: 'RunAsAny'
  fsGroup:
    rule: 'RunAsAny'
    # rule: 'MustRunAs'
    # ranges:
    #   # Forbid adding the root group.
    #   - min: 1
    #     max: 65535
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: psp:kube-system-psp
  namespace: kube-system
rules:
  - apiGroups:
      - extensions
    resourceNames:
      - kube-system-psp
    resources:
      - podsecuritypolicies
    verbs:
      - use
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: psp:kube-system-psp
  namespace: kube-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: psp:kube-system-psp
subjects:
  - kind: ServiceAccount
    name: coredns
  - kind: ServiceAccount
    name: heapster
  - kind: ServiceAccount
    name: metrics-server
  - kind: ServiceAccount
    name: influxdb
  - kind: ServiceAccount
    name: kube-dns
  - kind: ServiceAccount
    name: kubernetes-dashboard




# https://github.com/kubernetes/examples/blob/master/staging/podsecuritypolicy/rbac/policies.yaml
# https://cheatsheet.dennyzhang.com/kubernetes-yaml-templates
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: privileged
spec:
  fsGroup:
    rule: RunAsAny
  privileged: true
  runAsUser:
    rule: RunAsAny
  seLinux:
    rule: RunAsAny
  supplementalGroups:
    rule: RunAsAny
  volumes:
    - '*'
  allowedCapabilities:
    - '*'
  hostPID: true
  hostIPC: true
  hostNetwork: true
  hostPorts:
    - min: 1
      max: 65536




# https://kubernetes.io/docs/tasks/inject-data-application/podpreset/
# You can use a PodPreset object to inject information like secrets,
#    volume mounts, and environment variables etc into pods at creation time.
# Create a podpreset with volume type of emptydir
# The new PodPreset will act upon any pod that has label role: frontend
# https://cheatsheet.dennyzhang.com/kubernetes-yaml-templates
apiVersion: settings.k8s.io/v1alpha1
kind: PodPreset
metadata:
  name: allow-database
spec:
  selector:
    matchLabels:
      role: frontend
  env:
    - name: DB_PORT
      value: "6379"
  volumeMounts:
    - mountPath: /cache
      name: cache-volume
  volumes:
    - name: cache-volume
      emptyDir: {}
---
apiVersion: v1
kind: Pod
metadata:
  name: website
  labels:
    app: website
    role: frontend
spec:
  containers:
    - name: website
      image: nginx
      ports:
        - containerPort: 80




# https://github.com/digitalocean/csi-digitalocean
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: csi-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: do-block-storage




# https://kubernetes.io/docs/concepts/storage/volumes/
# https://cheatsheet.dennyzhang.com/kubernetes-yaml-templates
apiVersion: v1
kind: Pod
metadata:
  name: test-ebs
spec:
  containers:
    - image: k8s.gcr.io/test-webserver
      name: test-container
      volumeMounts:
        - mountPath: /test-ebs
          name: test-volume
  volumes:
    - name: test-volume
      # This AWS EBS volume must already exist.
      awsElasticBlockStore:
        volumeID: <volume-id>
        fsType: ext4




# https://cheatsheet.dennyzhang.com/kubernetes-yaml-templates
kind: PersistentVolume
apiVersion: v1
metadata:
  name: mysql-pv-volume
  labels:
    type: local
spec:
  storageClassName: manual
  capacity:
    storage: 15Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/data"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi




---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: nfs-backup-volume
  labels:
    volume: nfs-backup-volume
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteMany
  nfs:
    server: "my-nfs-server"
    path: "/my/nfs/jenkins-test"
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: nfs-backup-volume-claim
  namespace: pks-testbed
spec:
  resources:
    requests:
      storage: 1Gi
  accessModes:
    - ReadWriteMany
  selector:
    matchLabels:
      volume: nfs-backup-volume




# https://github.com/dennyzhang/dennytest/tree/master/kubernetes/k8s_security
# https://github.com/kubernetes/minikube/blob/master/docs/persistent_volumes.md
# https://cheatsheet.dennyzhang.com/kubernetes-yaml-templates
apiVersion: v1
kind: Pod
metadata:
  name: dummy
  namespace: default
  labels:
    env: test
spec:
  containers:
    - name: dummy
      image: getintodevops/jenkins-withdocker:lts
      # image: busybox
      args: [/bin/sh, -c, 'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done']
      volumeMounts:
        - name: hostvolrun
          mountPath: /myrun
  volumes:
    - name: hostvolrun
      hostPath:
        path: /var/run




# https://kubernetes.io/docs/concepts/storage/volumes/#creating-a-pd
# Creating a PD
# Before you can use a GCE PD with a Pod, you need to create it.
# gcloud compute disks create --size=500GB --zone=us-central1-a my-data-disk
apiVersion: v1
kind: Pod
metadata:
  name: test-pd
spec:
  containers:
    - image: k8s.gcr.io/test-webserver
      name: test-container
      volumeMounts:
        - mountPath: /test-pd
          name: test-volume
  volumes:
    - name: test-volume
      # This GCE PD must already exist.
      gcePersistentDisk:
        pdName: my-data-disk
        fsType: ext4




# https://kubernetes.io/docs/tutorials/k8s101/
# https://cheatsheet.dennyzhang.com/kubernetes-yaml-templates
apiVersion: v1
kind: Pod
metadata:
  name: redis
spec:
  containers:
    - name: redis
      image: redis
      volumeMounts:
        - name: redis-storage
          mountPath: /data/redis
          readOnly: false
  volumes:
    - name: redis-storage
      emptyDir: {}




apiVersion: v1
kind: ServiceAccount
metadata:
  name: serviceaccount-jenkins
  namespace: ci-testbed
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: clusterrole-jenkins
rules:
  - apiGroups: [""] # "" indicates the core API group
    resources: ["configmaps"]
    verbs: ["get", "list", "watch", "patch"]
  - apiGroups: [""] # "" indicates the core API group
    resources: ["pods"]
    verbs: ["get", "list", "watch", "create", "delete"]
  - apiGroups: [""]
    resources: ["pods/exec"]
    verbs: ["get", "create"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: service-account-jenkins
subjects:
  - kind: ServiceAccount
    name: serviceaccount-jenkins
    namespace: ci-testbed
roleRef:
  kind: ClusterRole
  name: clusterrole-jenkins
  apiGroup: rbac.authorization.k8s.io




# https://github.com/dennyzhang/cheatsheet-kubernetes-A4
# https://cheatsheet.dennyzhang.com/kubernetes-yaml-templates
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: clusterrole-default
rules:
  - apiGroups: [""] # "" indicates the core API group
    resources: ["configmaps"]
    verbs: ["get", "list", "watch", "patch"]
  - apiGroups: [""] # "" indicates the core API group
    resources: ["pods"]
    verbs: ["deletecollection"]
    # The sink-controller needs to be able to watch sinks
  - apiGroups: ["apps.mydomain.io"]
    resources: ["sinks"]
    verbs: ["get", "list", "watch"]
  # This rule is for kubernetes-metadata-filter
  - apiGroups:
      - ""
      - "apps"
      - "batch"
    resources: ["*"]
    verbs: ["get", "list", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: service-account-default
subjects:
  - kind: ServiceAccount
    name: default
    namespace: default
roleRef:
  kind: ClusterRole
  name: clusterrole-default
  apiGroup: rbac.authorization.k8s.io




# https://kubernetes.io/docs/tasks/administer-cluster/limit-storage-consumption/
# In this example, a PVC requesting 10Gi of storage would be rejected because it exceeds the 2Gi max.
# https://cheatsheet.dennyzhang.com/kubernetes-yaml-templates
apiVersion: v1
kind: LimitRange
metadata:
  name: storagelimits
spec:
  limits:
    - type: PersistentVolumeClaim
      max:
        storage: 2Gi
      min:
        storage: 1Gi




# https://kubernetes.io/docs/tasks/administer-cluster/limit-storage-consumption/
# In this example, a 6th PVC in the namespace would be rejected because it exceeds the maximum count of 5.
# https://cheatsheet.dennyzhang.com/kubernetes-yaml-templates
apiVersion: v1
kind: ResourceQuota
metadata:
  name: storagequota
spec:
  hard:
    persistentvolumeclaims: "5"
    requests.storage: "5Gi"




# https://hackernoon.com/top-10-kubernetes-tips-and-tricks-27528c2d0222
# https://cheatsheet.dennyzhang.com/kubernetes-yaml-templates
apiVersion: v1
  kind: LimitRange
  metadata:
    name: mem-limit-range
  spec:
    limits:
      - default:
          memory: 512Mi
        defaultRequest:
          memory: 256Mi
        type: Container




# https://github.com/kubernetes/community/blob/2780e1b37cac622b0d622208b246c60bfefd171c/contributors/design-proposals/network/network-policy.md#behavior
# Allow TCP 443 from any source in Bob's namespaces.
# https://cheatsheet.dennyzhang.com/kubernetes-yaml-templates
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-tcp-443
spec:
  podSelector:
    matchLabels:
      role: frontend
  ingress:
    - ports:
        - protocol: TCP
          port: 443
      from:
        - namespaceSelector:
            matchLabels:
              user: bob




# https://kubernetes.io/docs/concepts/services-networking/network-policies/
# https://cheatsheet.dennyzhang.com/kubernetes-yaml-templates
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-deny
spec:
  podSelector: {}
  policyTypes:
    - Ingress
    - Egress




# https://kubernetes.io/docs/concepts/services-networking/network-policies/
# https://cheatsheet.dennyzhang.com/kubernetes-yaml-templates
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-deny
spec:
  podSelector: {}
  policyTypes:
    - Ingress




# https://github.com/ahmetb/kubernetes-network-policy-recipes/blob/master/04-deny-traffic-from-other-namespaces.md
# Deny all traffic from other namespaces
# https://cheatsheet.dennyzhang.com/kubernetes-yaml-templates
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  namespace: secondary
  name: deny-from-other-namespaces
spec:
  podSelector:
    matchLabels:
  ingress:
    - from:
        - podSelector: {}




# https://kubernetes.io/docs/concepts/services-networking/network-policies/
# https://cheatsheet.dennyzhang.com/kubernetes-yaml-templates
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-deny
spec:
  podSelector: {}
  policyTypes:
    - Ingress




# https://kubernetes.io/blog/2017/10/enforcing-network-policies-in-kubernetes/
# nginx pods only allow ingress traffic from foo pods
# https://cheatsheet.dennyzhang.com/kubernetes-yaml-templates
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: access-nginx
spec:
  podSelector:
    matchLabels:
      app: nginx
  ingress:
    - from:
        - podSelector:
            matchLabels:
              app: foo




# https://kubernetes.io/blog/2017/10/enforcing-network-policies-in-kubernetes/
# nginx pods only allow ingress traffic from foo pods
# https://cheatsheet.dennyzhang.com/kubernetes-yaml-templates
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: access-nginx
spec:
  podSelector:
    matchLabels:
      app: nginx
  ingress:
    - from:
        - podSelector:
            matchLabels:
              app: foo




# https://kubernetes.io/docs/concepts/services-networking/network-policies/
# For db pods, the ingress traffic of port 6379
#     Only allow ingress traffic from source ip of 172.17.0.0/16, excluding 172.17.1.0/24
#     Or the pods from myproject namespace, or pods in current namespace with label of "role=frontend"
#
#     The egress traffic
#         It can only goes to port 5978 of 10.0.0.0/24
# https://cheatsheet.dennyzhang.com/kubernetes-yaml-templates
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: test-network-policy
  namespace: default
spec:
  podSelector:
    matchLabels:
      role: db
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
        - ipBlock:
            cidr: 172.17.0.0/16
            except:
              - 172.17.1.0/24
        - namespaceSelector:
            matchLabels:
              project: myproject
        - podSelector:
            matchLabels:
              role: frontend
      ports:
        - protocol: TCP
          port: 6379
  egress:
    - to:
        - ipBlock:
            cidr: 10.0.0.0/24
      ports:
        - protocol: TCP
          port: 5978




# https://kubernetes.io/docs/tutorials/stateful-application/basic-stateful-set/
# https://cheatsheet.dennyzhang.com/kubernetes-yaml-templates
apiVersion: v1
kind: Service
metadata:
  name: nginx
  labels:
    app: nginx
spec:
  ports:
    - port: 80
      name: web
  clusterIP: None
  selector:
    app: nginx
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: web
spec:
  serviceName: "nginx"
  replicas: 2
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
        - name: nginx
          image: k8s.gcr.io/nginx-slim:0.8
          ports:
            - containerPort: 80
              name: web
          volumeMounts:
            - name: www
              mountPath: /usr/share/nginx/html
  volumeClaimTemplates:
    - metadata:
        name: www
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 1Gi




# https://kubernetes.io/docs/tutorials/stateful-application/cassandra/
# https://cheatsheet.dennyzhang.com/kubernetes-yaml-templates
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: cassandra
  labels:
    app: cassandra
spec:
  serviceName: cassandra
  replicas: 3
  selector:
    matchLabels:
      app: cassandra
  template:
    metadata:
      labels:
        app: cassandra
    spec:
      terminationGracePeriodSeconds: 1800
      containers:
        - name: cassandra
          image: gcr.io/google-samples/cassandra:v13
          imagePullPolicy: Always
          ports:
            - containerPort: 7000
              name: intra-node
            - containerPort: 7001
              name: tls-intra-node
            - containerPort: 7199
              name: jmx
            - containerPort: 9042
              name: cql
          resources:
            limits:
              cpu: "500m"
              memory: 1Gi
            requests:
              cpu: "500m"
              memory: 1Gi
          securityContext:
            capabilities:
              add:
                - IPC_LOCK
          lifecycle:
            preStop:
              exec:
                command:
                  - /bin/sh
                  - -c
                  - nodetool drain
          env:
            - name: MAX_HEAP_SIZE
              value: 512M
            - name: HEAP_NEWSIZE
              value: 100M
            - name: CASSANDRA_SEEDS
              value: "cassandra-0.cassandra.default.svc.cluster.local"
            - name: CASSANDRA_CLUSTER_NAME
              value: "K8Demo"
            - name: CASSANDRA_DC
              value: "DC1-K8Demo"
            - name: CASSANDRA_RACK
              value: "Rack1-K8Demo"
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
          readinessProbe:
            exec:
              command:
                - /bin/bash
                - -c
                - /ready-probe.sh
            initialDelaySeconds: 15
            timeoutSeconds: 5
          # These volume mounts are persistent. They are like inline claims,
          # but not exactly because the names need to match exactly one of
          # the stateful pod volumes.
          volumeMounts:
            - name: cassandra-data
              mountPath: /cassandra_data
  # These are converted to volume claims by the controller
  # and mounted at the paths mentioned above.
  # do not use these in production until ssd GCEPersistentDisk or other ssd pd
  volumeClaimTemplates:
    - metadata:
        name: cassandra-data
      spec:
        accessModes: [ "ReadWriteOnce" ]
        storageClassName: fast
        resources:
          requests:
            storage: 1Gi
---
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: fast
provisioner: k8s.io/minikube-hostpath
parameters:
  type: pd-ssd




# https://github.com/kubernetes/kubernetes/blob/v1.14.0-alpha.0/cluster/addons/addon-manager/namespace.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: my-dummy
